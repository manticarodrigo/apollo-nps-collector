# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Rating implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
  survey(where: SurveyWhereInput): Survey!
}

type Survey implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  endDate: DateTime
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
}


#
# Other Types
#

type AggregateRating {
  count: Int!
}

type AggregateSurvey {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSurvey(data: SurveyCreateInput!): Survey!
  createRating(data: RatingCreateInput!): Rating!
  updateSurvey(data: SurveyUpdateInput!, where: SurveyWhereUniqueInput!): Survey
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteRating(where: RatingWhereUniqueInput!): Rating
  upsertSurvey(where: SurveyWhereUniqueInput!, create: SurveyCreateInput!, update: SurveyUpdateInput!): Survey!
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  updateManySurveys(data: SurveyUpdateInput!, where: SurveyWhereInput!): BatchPayload!
  updateManyRatings(data: RatingUpdateInput!, where: RatingWhereInput!): BatchPayload!
  deleteManySurveys(where: SurveyWhereInput!): BatchPayload!
  deleteManyRatings(where: RatingWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  survey(where: SurveyWhereUniqueInput!): Survey
  rating(where: RatingWhereUniqueInput!): Rating
  surveysConnection(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyConnection!
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type RatingConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  rating: Int!
  survey: SurveyCreateOneWithoutRatingsInput!
}

input RatingCreateManyWithoutSurveyInput {
  create: [RatingCreateWithoutSurveyInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateWithoutSurveyInput {
  rating: Int!
}

"""
An edge in a connection.
"""
type RatingEdge {
  """
  The item at the end of the edge.
  """
  node: Rating!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  rating_ASC
  rating_DESC
}

type RatingPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RatingSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RatingSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
}

input RatingUpdateInput {
  rating: Int
  survey: SurveyUpdateOneWithoutRatingsInput
}

input RatingUpdateManyWithoutSurveyInput {
  create: [RatingCreateWithoutSurveyInput!]
  connect: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  delete: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutSurveyInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutSurveyInput!]
}

input RatingUpdateWithoutSurveyDataInput {
  rating: Int
}

input RatingUpdateWithWhereUniqueWithoutSurveyInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutSurveyDataInput!
}

input RatingUpsertWithWhereUniqueWithoutSurveyInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutSurveyDataInput!
  create: RatingCreateWithoutSurveyInput!
}

input RatingWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RatingWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RatingWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  rating: Int
  """
  All values that are not equal to given value.
  """
  rating_not: Int
  """
  All values that are contained in given list.
  """
  rating_in: [Int!]
  """
  All values that are not contained in given list.
  """
  rating_not_in: [Int!]
  """
  All values less than the given value.
  """
  rating_lt: Int
  """
  All values less than or equal the given value.
  """
  rating_lte: Int
  """
  All values greater than the given value.
  """
  rating_gt: Int
  """
  All values greater than or equal the given value.
  """
  rating_gte: Int
  survey: SurveyWhereInput
}

input RatingWhereUniqueInput {
  id: ID
}

type Subscription {
  survey(where: SurveySubscriptionWhereInput): SurveySubscriptionPayload
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
}

"""
A connection to a list of items.
"""
type SurveyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SurveyEdge]!
  aggregate: AggregateSurvey!
}

input SurveyCreateInput {
  isPublished: Boolean!
  title: String!
  text: String!
  endDate: DateTime
  ratings: RatingCreateManyWithoutSurveyInput
}

input SurveyCreateOneWithoutRatingsInput {
  create: SurveyCreateWithoutRatingsInput
  connect: SurveyWhereUniqueInput
}

input SurveyCreateWithoutRatingsInput {
  isPublished: Boolean!
  title: String!
  text: String!
  endDate: DateTime
}

"""
An edge in a connection.
"""
type SurveyEdge {
  """
  The item at the end of the edge.
  """
  node: Survey!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SurveyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  endDate_ASC
  endDate_DESC
}

type SurveyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  endDate: DateTime
}

type SurveySubscriptionPayload {
  mutation: MutationType!
  node: Survey
  updatedFields: [String!]
  previousValues: SurveyPreviousValues
}

input SurveySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SurveySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SurveySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SurveyWhereInput
}

input SurveyUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  endDate: DateTime
  ratings: RatingUpdateManyWithoutSurveyInput
}

input SurveyUpdateOneWithoutRatingsInput {
  create: SurveyCreateWithoutRatingsInput
  connect: SurveyWhereUniqueInput
  delete: Boolean
  update: SurveyUpdateWithoutRatingsDataInput
  upsert: SurveyUpsertWithoutRatingsInput
}

input SurveyUpdateWithoutRatingsDataInput {
  isPublished: Boolean
  title: String
  text: String
  endDate: DateTime
}

input SurveyUpsertWithoutRatingsInput {
  update: SurveyUpdateWithoutRatingsDataInput!
  create: SurveyCreateWithoutRatingsInput!
}

input SurveyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SurveyWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SurveyWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  endDate: DateTime
  """
  All values that are not equal to given value.
  """
  endDate_not: DateTime
  """
  All values that are contained in given list.
  """
  endDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  endDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  endDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  endDate_lte: DateTime
  """
  All values greater than the given value.
  """
  endDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  endDate_gte: DateTime
  ratings_every: RatingWhereInput
  ratings_some: RatingWhereInput
  ratings_none: RatingWhereInput
}

input SurveyWhereUniqueInput {
  id: ID
}
